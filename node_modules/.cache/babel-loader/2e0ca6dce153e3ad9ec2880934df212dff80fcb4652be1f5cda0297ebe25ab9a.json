{"ast":null,"code":"import LocalStorageService from './localStorageService';\nimport jwt from 'jsonwebtoken';\nimport ApiService from '../apiservice';\nexport const LOGGED_USER = '_logged_user';\nexport const TOKEN = 'access_token';\nexport default class AuthService {\n  static isAuthenticatedUser() {\n    const token = LocalStorageService.getItem(TOKEN);\n    if (!token) {\n      return false;\n    }\n    const decodedToken = jwt.decode(token);\n    const expiration = decodedToken.exp;\n    const isInvalidToken = Date.now() >= expiration * 1000;\n    return !isInvalidToken;\n  }\n  static removeAuthenticatedUsero() {\n    LocalStorageService.removeItem(LOGGED_USER);\n    LocalStorageService.removeItem(TOKEN);\n  }\n  static login(user, token) {\n    LocalStorageService.addItem(LOGGED_USER, user);\n    LocalStorageService.addItem(TOKEN, token);\n    ApiService.registerToken(token);\n  }\n  static getAuthenticatedUser() {\n    return LocalStorageService.getItem(LOGGED_USER);\n  }\n  static refreshSession() {\n    const token = LocalStorageService.getItem(TOKEN);\n    const user = AuthService.getAuthenticatedUser();\n    AuthService.login(user, token);\n    return user;\n  }\n}","map":{"version":3,"names":["LocalStorageService","jwt","ApiService","LOGGED_USER","TOKEN","AuthService","isAuthenticatedUser","token","getItem","decodedToken","decode","expiration","exp","isInvalidToken","Date","now","removeAuthenticatedUsero","removeItem","login","user","addItem","registerToken","getAuthenticatedUser","refreshSession"],"sources":["/home/ket/Documentos/JAVA/MyFinancesFront/my-finances-app/src/app/service/authService.js"],"sourcesContent":["import LocalStorageService from './localStorageService'\n\nimport jwt from 'jsonwebtoken'\nimport ApiService from '../apiservice'\n\nexport const LOGGED_USER = '_logged_user'\nexport const TOKEN = 'access_token'\n\nexport default class AuthService {\n\n    static isAuthenticatedUser(){\n        const token = LocalStorageService.getItem(TOKEN)\n        if(!token){\n            return false;\n        }\n        const decodedToken = jwt.decode(token)\n        const expiration = decodedToken.exp\n\n        const isInvalidToken = Date.now() >= (expiration * 1000)\n\n        return !isInvalidToken;\n    }\n\n    static removeAuthenticatedUsero(){\n        LocalStorageService.removeItem(LOGGED_USER)\n        LocalStorageService.removeItem(TOKEN);\n    }\n\n    static login(user, token){\n        LocalStorageService.addItem(LOGGED_USER, user)\n        LocalStorageService.addItem(TOKEN, token);\n        ApiService.registerToken(token)\n    }\n\n    static getAuthenticatedUser(){\n        return LocalStorageService.getItem(LOGGED_USER);\n    }\n\n    static refreshSession(){\n        const token  = LocalStorageService.getItem(TOKEN)\n        const user = AuthService.getAuthenticatedUser()\n        AuthService.login(user, token)\n        return user;\n    }\n\n}"],"mappings":"AAAA,OAAOA,mBAAmB,MAAM,uBAAuB;AAEvD,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,UAAU,MAAM,eAAe;AAEtC,OAAO,MAAMC,WAAW,GAAG,cAAc;AACzC,OAAO,MAAMC,KAAK,GAAG,cAAc;AAEnC,eAAe,MAAMC,WAAW,CAAC;EAE7B,OAAOC,mBAAmB,GAAE;IACxB,MAAMC,KAAK,GAAGP,mBAAmB,CAACQ,OAAO,CAACJ,KAAK,CAAC;IAChD,IAAG,CAACG,KAAK,EAAC;MACN,OAAO,KAAK;IAChB;IACA,MAAME,YAAY,GAAGR,GAAG,CAACS,MAAM,CAACH,KAAK,CAAC;IACtC,MAAMI,UAAU,GAAGF,YAAY,CAACG,GAAG;IAEnC,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,EAAE,IAAKJ,UAAU,GAAG,IAAK;IAExD,OAAO,CAACE,cAAc;EAC1B;EAEA,OAAOG,wBAAwB,GAAE;IAC7BhB,mBAAmB,CAACiB,UAAU,CAACd,WAAW,CAAC;IAC3CH,mBAAmB,CAACiB,UAAU,CAACb,KAAK,CAAC;EACzC;EAEA,OAAOc,KAAK,CAACC,IAAI,EAAEZ,KAAK,EAAC;IACrBP,mBAAmB,CAACoB,OAAO,CAACjB,WAAW,EAAEgB,IAAI,CAAC;IAC9CnB,mBAAmB,CAACoB,OAAO,CAAChB,KAAK,EAAEG,KAAK,CAAC;IACzCL,UAAU,CAACmB,aAAa,CAACd,KAAK,CAAC;EACnC;EAEA,OAAOe,oBAAoB,GAAE;IACzB,OAAOtB,mBAAmB,CAACQ,OAAO,CAACL,WAAW,CAAC;EACnD;EAEA,OAAOoB,cAAc,GAAE;IACnB,MAAMhB,KAAK,GAAIP,mBAAmB,CAACQ,OAAO,CAACJ,KAAK,CAAC;IACjD,MAAMe,IAAI,GAAGd,WAAW,CAACiB,oBAAoB,EAAE;IAC/CjB,WAAW,CAACa,KAAK,CAACC,IAAI,EAAEZ,KAAK,CAAC;IAC9B,OAAOY,IAAI;EACf;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}